{"version":3,"file":"main.6af7289a46adaa4b03de.bundle.js","sources":["webpack:///./src/utils/date-utils.js"],"sourcesContent":["import {range} from 'lodash';\n\nexport const WEEKDAYS_SHORT = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\nexport const WEEKDAYS = [\n  'Sunday',\n  'Monday',\n  'Tuesday',\n  'Wednesday',\n  'Thursday',\n  'Friday',\n  'Saturday',\n];\nexport const MONTHS = [\n  'January',\n  'February',\n  'March',\n  'April',\n  'May',\n  'June',\n  'July',\n  'August',\n  'September',\n  'October',\n  'November',\n  'December',\n];\n\nexport const isSameYear = (a, b) => a.getFullYear() === b.getFullYear();\n\nexport const isSameMonth = (a, b) =>\n  isSameYear(a, b) && a.getMonth() === b.getMonth();\n\nexport const isSameDay = (a, b) =>\n  isSameMonth(a, b) && a.getDate() === b.getDate();\n\nexport const isInRange = (date, start, end) => start <= date && date <= end;\n\nexport const addMonths = (date, count) =>\n  new Date(date.getFullYear(), date.getMonth() + count);\n\n/**\n * Given a date, how many days are in the month?\n *  Peek ahead to \"next month\" and look back to \"last day of current month\" via date=0\n * @param date\n * @return int\n */\nexport const daysInMonth = date =>\n  new Date(date.getFullYear(), date.getMonth() + 1, 0).getDate();\n\n/**\n * Given a month date, provide \"visible dates\" for a calendar month.\n * 7 days per week. Padded with overflow from previous/next month.\n * @param monthDate\n * @return Date[]\n */\nexport const calendarMonthDates = monthDate => {\n  const [prevMonth, currentMonth, nextMonth] = [-1, 0, 1].map(\n    addMonths =>\n      new Date(monthDate.getFullYear(), monthDate.getMonth() + addMonths)\n  );\n\n  const prevPadding = range(currentMonth.getDay())\n    .reduce((days, i) => [daysInMonth(prevMonth) - i, ...days], [])\n    .map(date => new Date(prevMonth.getFullYear(), prevMonth.getMonth(), date));\n\n  const monthDates = range(1, daysInMonth(currentMonth) + 1).map(\n    date => new Date(currentMonth.getFullYear(), currentMonth.getMonth(), date)\n  );\n\n  const lengthModulus = (prevPadding.length + monthDates.length) % 7;\n  const nextPadding = range(\n    lengthModulus ? Math.abs(lengthModulus - 7) : 0\n  ).map(i => new Date(nextMonth.getFullYear(), nextMonth.getMonth(), i + 1));\n\n  return [].concat(prevPadding, monthDates, nextPadding);\n};\n"],"mappings":"AAEA","sourceRoot":""}